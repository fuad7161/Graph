#include<bits/stdc++.h>
using namespace std;

//debug..........
#define error(args...) {vector<string>_v=split(#args,',');err(_v.begin(),args);cout<<endl;}
vector<string> split(const string &s, char c) {vector<string>v; stringstream ss(s); string x;while (getline(ss, x, c))v.emplace_back(x); return move(v);} void err(vector<string>::iterator it) {}
template<typename T, typename... Args>void err(vector<string>::iterator it, T a, Args...args) {cout << it->substr((*it)[0] == ' ', it->length()) << " = " << a << " "; err(++it, args...);}


const int N = 1e5+5;
std::vector<int> g[N];
int discover[N] , back[N];
int vis[N];
int timer = 0;
set<int> ap;

#define endl '\n'
void dfs(int node , int p){
    vis[node] = 1;
    int children = 0;
    discover[node] = back[node] = timer++;
    for(int child: g[node]){
        if(child == p)continue;
        if(vis[child]){
            back[node] = min(back[node] , discover[child]);
        }else{
            dfs(child , node);
            back[node] = min(back[node] , back[child]);
            if(back[child] >= discover[node] and p != -1){
                ap.insert(node);
            }
            children++;
        }
    }
    if(p == -1 and children > 1){
        ap.insert(node);
    }
}
int t1  = 1;

int solve(){
    int n,m;
    cin>>n>>m;
    ap.clear();
    for(int i=0;i<=n;i++){
        g[i].clear();
        vis[i] = 0;
        discover[i] = 0;
        back[i] = 0;
    }
    int x,y;
    for(int i=0;i<m;i++){
        cin>>x>>y;
        g[x].push_back(y);
        g[y].push_back(x);
    }

    for(int i=1;i<=n;i++){
        if(!vis[i]){
            dfs(i,-1);
        }
    }
    cout<<"Case "<<t1++<<": "<<ap.size()<<endl;

    return 0;
}

int main(){

    int t;
    cin>>t;

    while(t--){
        solve();
    }
}

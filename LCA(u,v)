#include <bits/stdc++.h>
using namespace std;

//debug..........
#define error(args...) {vector<string>_v=split(#args,',');err(_v.begin(),args);cout<<endl;}
vector<string> split(const string &s, char c) {vector<string>v; stringstream ss(s); string x;while (getline(ss, x, c))v.emplace_back(x); return move(v);} void err(vector<string>::iterator it) {}
template<typename T, typename... Args>void err(vector<string>::iterator it, T a, Args...args) {cout << it->substr((*it)[0] == ' ', it->length()) << " = " << a << " "; err(++it, args...);}
#define int long long


const int N = 2e5+5;
const int k = 18;

vector<int> g[N];
int dep[N];
int par[N][k];

void dfs(int x, int p){
    dep[x] = dep[p]+1;
    par[x][0] = p;
    for(int i=1;i<k;i++){
        par[x][i] = par[par[x][i-1]][i-1];
    }

    for(int i: g[x]){
        if(i == p) continue;
        dfs(i,x);
    }
}

int get_lca(int x,int y){
    if(dep[x] > dep[y]) swap(x,y);
    int d = dep[y] - dep[x];
    for(int i=0;i<k;i++){
        if(d&(1<<i)){
            y = par[y][i];
        }
    }
    if(x == y){
        return x;
    }
    for(int i=k-1;i>=0;i--){
        if(par[x][i] != par[y][i]){
            x = par[x][i];
            y = par[y][i];
        }
    }
    return par[x][0];
}

signed solve(){

    int n;
    cin>>n;

    for(int i=1;i<n;i++){
        int x,y;
        cin>>x>>y;
        g[x].push_back(y);
        g[y].push_back(x);
    }   

    dfs(1,1);
    int q;
    cin>>q;

    while(q--){
        int x,y;cin>>x>>y;
        cout<<get_lca(x,y)<<endl;
    }

    return 0;
}
signed main(){
    ios::sync_with_stdio(false);cin.tie(0);int test = 1;
    // cin>>test;
    while (test--)solve();return 0;
}
